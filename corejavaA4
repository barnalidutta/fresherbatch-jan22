1. Arithmatic exception

package ExceptionHandling;

import java.util.Scanner;

class Ex1
{  
	public static void main(String arg[])
    {  
		try
		{
			int a,b,c;
			Scanner KB=new Scanner(System.in);
			
			System.out.print("Enter first number : ");
			a=KB.nextInt();
       
			System.out.print("Enter second number : ");
			b=KB.nextInt();
 
			c=a/b;
			System.out.println("Result:"+c);
		}
		catch(ArithmeticException e)
		{
			System.out.println("Error:"+e.getMessage());
			System.out.println("Error:"+e);
		}

		System.out.println("End of Program...");
	}
}


2.	Carrying forward with the above problem, handled ArithmeticException by raising UnsupportedOperationException as a solution.

import java.util.Scanner;
public class ArithExcep {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		try {
			int a,b;
			Scanner sc =  new Scanner(System.in);
			System.out.println("Enter the first number ");
			a = sc.nextInt();
			System.out.println("Enter the second number ");
			b = sc.nextInt();
			System.out.println(a/b);
		}
		catch(ArithmeticException e)
		{
			System.out.println("Exception Handled "+ e);
			System.out.println("UnsupportedOperationException");
			
		}
	}

}

Output: Enter the first number 
9
Enter the second number 
0
Exception Handled java.lang.ArithmeticException: / by zero
UnsupportedOperationException


3.	Perform withdraw functionality with saving account object.

i)Raise InsufficientBalanceException if you are trying to withdraw more than balance. 

package Account;
import java.util.Scanner;
class InsufficientBalanceException extends RuntimeException{
	
}
public class SavingAccount {
	Scanner sc  = new Scanner(System.in);
	public void withdrawal(double a)
	{
		System.out.println("Enter your Id ");
		long id = sc.nextLong();
		System.out.println("Enter your balance ");
		double b = sc.nextDouble();
		try {
			if(a<=b) {
				b = b - a;
				System.out.println("Balance= " + b);
				
			}
			else {
				throw new InsufficientBalanceException();
			}
			
		}
		catch (InsufficientBalanceException e) {
			e.printStackTrace();
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		SavingAccount s = new SavingAccount();
		s.withdrawal(2000);
	}

}

Output: Enter your Id 
5446
Enter your balance 
650
Account.InsufficientBalanceException
	at Account.SavingAccount.withdrawal(SavingAccount.java:21)
	at Account.SavingAccount.main(SavingAccount.java:32)

ii) Raise a illigalBankTransaction if you are trying to withdraw negative amount from account.

package Account;
import java.util.Scanner;
class IllegalBankTransactionException extends RuntimeException{
	
}
public class SavingsAccount {
	
	Scanner sc  = new Scanner(System.in);
	public void withdrawal(double a)
	{
		System.out.println("Enter your Id ");
		long id = sc.nextLong();
		System.out.println("Enter your balance ");
		double b = sc.nextDouble();
		try {
			if(a>0) {
				System.out.println("Balance= " + b);
				
			}
			else {
				throw new IllegalBankTransactionException();
			}
			
		}
		catch (IllegalBankTransactionException e) {
			e.printStackTrace();
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		SavingsAccount s = new SavingsAccount();
		s.withdrawal(-10201);
}}

Output: Enter your Id 
12634
Enter your balance 
200
Account.IllegalBankTransactionException
at Account.SavingsAccount.withdrawal(SavingsAccount.java:21)
at Account.SavingsAccount.main(SavingsAccount.java:32)


